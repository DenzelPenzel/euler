"""
The sequence of triangle numbers is generated by adding the natural numbers. 

So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 

The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1, 3
6: 1, 2, 3, 6
10: 1, 2, 5, 10
15: 1, 3, 5, 15
21: 1, 3, 7, 21
28: 1, 2, 4, 7, 14, 28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over n divisors?
"""


"""
Prime factorization is the process of determining the prime numbers that multiply together to a given number

Example: prime factorization of 84 is 2 * 2 * 3 * 7 or 2^2 * 3 * 7

Time O(sqrt(n))

Improvement: Pollard's rho algorithm or the quadratic sieve
"""

import unittest
from typing import Dict


def prime_factorization(n: int) -> Dict[int, int]:
    factors = {}
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n /= i
            factors[i] = factors.get(i, 0) + 1
    if n > 1:
        factors[n] = factors.get(n, 0) + 1
    return factors

# the number of divisors of a number n
def num_divisors(n: int) -> int:
    factors = prime_factorization(n)
    total = 1
    for factor in factors:
        total *= factors[factor] + 1
    return total


def divisible_triangle_number(n: int) -> int:
    i = 1
    k = 2
    while True:
        if num_divisors(i) >= n:
            return i
        i += k
        k += 1


class Test_Divisible_Triangle_Number(unittest.TestCase):
    def test_divisible_triangle_number(self):
        for input, want in [[5, 28], [23, 630], [167, 1385280], [374, 17907120], [500, 76576500]]:
            got = divisible_triangle_number(input)
            self.assertEqual(got, want)


if __name__ == "__main__":
    unittest.main()
